
Inline          = require './Inline'
Pattern         = require './Pattern'
Utils           = require './Utils'
ParseException  = require './Exception/ParseException'
ParseMore       = require './Exception/ParseMore'

# Parser parses YAML strings to convert them to JavaScript objects.
#
class Parser

    # Pre-compiled patterns
    #
    PATTERN_FOLDED_SCALAR_ALL:              new Pattern '^(?:(?<type>![^\\|>]*)\\s+)?(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$'
    PATTERN_FOLDED_SCALAR_END:              new Pattern '(?<separator>\\||>)(?<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?<comments> +#.*)?$'
    PATTERN_SEQUENCE_ITEM:                  new Pattern '^\\-((?<leadspaces>\\s+)(?<value>.+?))?\\s*$'
    PATTERN_ANCHOR_VALUE:                   new Pattern '^&(?<ref>[^ ]+) *(?<value>.*)'
    PATTERN_COMPACT_NOTATION:               new Pattern '^(?<key>'+Inline.REGEX_QUOTED_STRING+'|[^ \'"\\{\\[].*?) *\\:(\\s+(?<value>.+?))?\\s*$'
    PATTERN_MAPPING_ITEM:                   new Pattern '^(?<key>'+Inline.REGEX_QUOTED_STRING+'|[^ \'"\\[\\{].*?) *\\:(\\s+(?<value>.+?))?\\s*$'
    PATTERN_DECIMAL:                        new Pattern '\\d+'
    PATTERN_INDENT_SPACES:                  new Pattern '^ +'
    PATTERN_TRAILING_LINES:                 new Pattern '(\n*)$'
    PATTERN_YAML_HEADER:                    new Pattern '^\\%YAML[: ][\\d\\.]+.*\n', 'm'
    PATTERN_LEADING_COMMENTS:               new Pattern '^(\\#.*?\n)+', 'm'
    PATTERN_DOCUMENT_MARKER_START:          new Pattern '^\\-\\-\\-.*?\n', 'm'
    PATTERN_DOCUMENT_MARKER_END:            new Pattern '^\\.\\.\\.\\s*$', 'm'
    PATTERN_FOLDED_SCALAR_BY_INDENTATION:   {}

    # Context types
    #
    CONTEXT_NONE:       0
    CONTEXT_SEQUENCE:   1
    CONTEXT_MAPPING:    2


    # Constructor
    #
    # @param [Integer]  offset  The offset of YAML document (used for line numbers in error messages)
    #
    constructor: (@offset = 0) ->
        @lines          = []
        @currentLineNb  = -1
        @currentLine    = ''
        @refs           = {}


    # Parses a YAML string to a JavaScript value.
    #
    # @param [String]   value                   A YAML string
    # @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types (a JavaScript resource or object), false otherwise
    # @param [Function] objectDecoder           A function to deserialize custom objects, null otherwise
    #
    # @return [Object]  A JavaScript value
    #
    # @throw [ParseException] If the YAML is not valid
    #
    parse: (value, exceptionOnInvalidType = false, objectDecoder = null) ->
        @currentLineNb = -1
        @currentLine = ''
        @lines = @cleanup(value).split "\n"

        data = null
        context = @CONTEXT_NONE
        allowOverwrite = false
        while @moveToNextLine()
            if @isCurrentLineEmpty()
                continue

            # Tab?
            if "\t" is @currentLine[0]
                throw new ParseException 'A YAML file cannot contain tabs as indentation.', @getRealCurrentLineNb() + 1, @currentLine

            isRef = mergeNode = false
            if values = @PATTERN_SEQUENCE_ITEM.exec @currentLine
                if @CONTEXT_MAPPING is context
                    throw new ParseException 'You cannot define a sequence item when in a mapping'
                context = @CONTEXT_SEQUENCE
                data ?= []

                if values.value? and matches = @PATTERN_ANCHOR_VALUE.exec values.value
                    isRef = matches.ref
                    values.value = matches.value

                # Array
                if not(values.value?) or '' is Utils.trim(values.value, ' ') or Utils.ltrim(values.value, ' ').indexOf('#') is 0
                    if @currentLineNb < @lines.length - 1 and not @isNextLineUnIndentedCollection()
                        c = @getRealCurrentLineNb() + 1
                        parser = new Parser c
                        parser.refs = @refs
                        data.push parser.